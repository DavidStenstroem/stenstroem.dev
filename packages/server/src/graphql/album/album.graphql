type Album {
  albumId: ID!
  title: String!
  slug: String!
  description: String
  createdBy: Account!
  media: [Media!]!
  mediaFeed(cursor: String, limit: Int): MediaConnection
  createdAt: DateTime!
  updatedAt: DateTime!
  cover: Media
  mediaCount: Int
  isPrivate: Boolean!
}

type MediaConnection {
  edges: [Media!]!
  pageInfo: PageInfo!
}

type Cover {
  title: String!
  slug: String!
  creator: Account!
  isPrivate: Boolean!
  image: Media!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoverConnection {
  edges: [Cover!]!
  pageInfo: PageInfo!
}

type PageInfo {
  totalItems: Int!
  hasNextPage: Boolean!
  endCursor: String!
}

input CreateAlbumInput {
  title: String!
  description: String
  media: [String!]
  files: [Upload!]
  sharedWith: [String!]
}

type CreateAlbumResponse {
  errors: [FormError!]
  link: String
}

type Query {
  getAlbum(slug: String!): Album
  myAlbums(cursor: String, limit: Int): CoverConnection!
  getStreamCover: Media
  getStream(cursor: String, limit: Int): MediaConnection!
}

type Mutation {
  createAlbum(input: CreateAlbumInput!): CreateAlbumResponse!
}
